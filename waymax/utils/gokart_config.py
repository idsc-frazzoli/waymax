import chex
from chex import dataclass
from dataclasses import field
from jax import Array, numpy as jnp
from jaxtyping import Float


@dataclass
class GoKartGeometry:
    l1: float = 0.72  # Distance from cog to front tires
    l2: float = 0.47  # Distance from cog to rear tires
    w1: float = 0.94  # Distance between front Tires
    w2: float = 1.08  # Distance between rear Tires
    back2backaxle: float = 0.23  # Distance from the rear of the gokart to the back axle
    frontaxle2front: float = 0.33  # Distance from the front axle to the front of the kart
    wheel2border: float = 0.18  # Side distance between center of the wheel and external frame
    F2n: float = l1 / (l1 + l2)  # Normal force at the rear axle "portion of Mass supported by rear tire"


@dataclass
class TricycleParams:
    Iz: float = 0.7  # Inertia around the z axis
    REG_: float = 0.5  # Regularization factor


@dataclass
class PajieckaParams:
    class front_paj:
        B: float = 17.17
        C: float = 1.26
        D: float = 0.8
        E: float = 0.42

    class rear_paj:
        B: float = 13.02
        C: float = 1.27
        D: float = 0.97
        E: float = 0.21


@dataclass
class TrackControlPoints:
    """Control points for the racing track, can be modified to create different tracks"""

    x: Float[Array, "N"] = field(default_factory=lambda: jnp.array((
        30.3914, 34.5985, 37.9136, 41.6058, 44.124, 45.9188, 47.1959, 46.7351, 47.377, 47.6532, 46.6591,
        46.5467, 47.6512, 50.0049, 52.5865, 53.9889, 54.3171, 54.2784, 53.4375, 52.333, 52.4365, 52.7472,
        52.8369, 55.1218, 58.2352, 61.1966, 63.6817, 63.8858, 63.6888, 62.9846, 61.3693, 60.3086, 61.1369,
        62.628, 63.8217, 63.6216, 63.6008, 60.7928, 57.7416, 55.1978, 52.4077, 50.7395, 48.7177, 46.7472,
        44.5036, 42.2313, 40.4915, 39.5135, 38.3055, 36.587, 34.6551, 32.3964, 30.7208, 29.1654, 27.7528,
        26.6793, 24.522, 22.221, 19.7474, 19.1721, 19.4022, 20.2766, 21.5824, 20.4607, 19.5942, 18.8348,
        17.8684, 17.3219, 17.6429, 19.1694, 20.7179, 24.2734, 27.8213)))
    y: Float[Array, "N"] = field(default_factory=lambda: jnp.array((
        20.1282, 20.1528, 20.2138, 20.2842, 20.7843, 22.4755, 24.7191, 27.2454, 29.406, 31.7393, 34.3911,
        36.9626, 39.0335, 39.6952, 39.4935, 37.7643, 35.5898, 33.2763, 30.4582, 27.3863, 25.0047, 22.5748,
        20.3727, 19.9309, 19.6341, 19.5305, 20.4003, 23.1452, 25.8114, 27.7581, 29.2077, 32.5508, 35.243,
        37.1483, 39.4283, 41.6718, 44.6677, 46.0382, 46.4869, 45.5216, 45.234, 45.2915, 46.1012, 46.1193,
        45.9755, 45.6591, 44.8517, 43.0108, 41.8028, 40.0157, 38.8012, 39.2758, 40.0983, 41.2595, 43.9097,
        45.7592, 46.6796, 46.7659, 46.1906, 43.9183, 42.0775, 39.5521, 37.8896, 35.5483, 33.2801, 30.8985,
        28.4824, 25.8132, 22.2225, 20.5131, 19.6407, 19.9199, 20.0432)))
    r: Float[Array, "N"] = field(default_factory=lambda: jnp.array((
        4.6, 4.6, 4.6, 4.6, 4.0, 3.0, 3.0, 3.0, 3.0, 1.6, 2.4, 4.6, 5.6, 4.98, 5.4, 5.4, 3.0, 2.4, 2.2,
        2.4, 2.4, 4.4, 4.4, 4.0, 3.0, 3.0, 4.4, 4.0, 3.4, 3.8, 3.4, 2.0, 3.6, 5.0, 4.0, 4.0, 6.0, 4.8, 4.0,
        2.0, 1.6, 2.0, 3.6, 4.4, 5.0, 6.0, 6.0, 5.0, 3.6, 3.4, 4.0, 3.0, 2.6, 3.0, 3.0, 3.0, 3.6, 3.6, 5.0,
        4.8, 2.0, 1.6, 3.8, 2.8, 2.0, 1.8, 2.8, 3.0, 3.0, 4.6, 4.4, 4.4, 4.6)))

    def __post_init__(self):
        assert len(self.x) == len(self.y) == len(self.r), "Control points should have the same length"


# @dataclass
# class TrackControlPoints:
#     # Control points for the racing track, can be modified to create different tracks
#
#     x = [30.3914, 34.5985, 37.9136, 41.6058, 44.124, 45.9188, 47.1959, 46.7351, 47.377, 47.6532, 46.6591,
#          46.5467, 47.6512, 50.0049, 52.5865, 53.9889, 54.3171, 54.2784, 53.4375, 52.333, 52.4365, 52.7472,
#          52.8369, 55.1218, 58.2352, 61.1966, 63.6817, 63.8858, 63.6888, 62.9846, 61.3693, 60.3086, 61.1369,
#          62.628, 63.8217, 63.6216, 63.6008, 60.7928, 57.7416, 55.1978, 52.4077, 50.7395, 48.7177, 46.7472,
#          44.5036, 42.2313, 40.4915, 39.5135, 38.3055, 36.587, 34.6551, 32.3964, 30.7208, 29.1654, 27.7528,
#          26.6793, 24.522, 22.221, 19.7474, 19.1721, 19.4022, 20.2766, 21.5824, 20.4607, 19.5942, 18.8348,
#          17.8684, 17.3219, 17.6429, 19.1694, 20.7179, 24.2734, 27.8213]
#     y = [20.1282, 20.1528, 20.2138, 20.2842, 20.7843, 22.4755, 24.7191, 27.2454, 29.406, 31.7393, 34.3911,
#          36.9626, 39.0335, 39.6952, 39.4935, 37.7643, 35.5898, 33.2763, 30.4582, 27.3863, 25.0047, 22.5748,
#          20.3727, 19.9309, 19.6341, 19.5305, 20.4003, 23.1452, 25.8114, 27.7581, 29.2077, 32.5508, 35.243,
#          37.1483, 39.4283, 41.6718, 44.6677, 46.0382, 46.4869, 45.5216, 45.234, 45.2915, 46.1012, 46.1193,
#          45.9755, 45.6591, 44.8517, 43.0108, 41.8028, 40.0157, 38.8012, 39.2758, 40.0983, 41.2595, 43.9097,
#          45.7592, 46.6796, 46.7659, 46.1906, 43.9183, 42.0775, 39.5521, 37.8896, 35.5483, 33.2801, 30.8985,
#          28.4824, 25.8132, 22.2225, 20.5131, 19.6407, 19.9199, 20.0432]
#     r = [4.6, 4.6, 4.6, 4.6, 4.0, 3.0, 3.0, 3.0, 3.0, 1.6, 2.4, 4.6, 5.6, 4.98, 5.4, 5.4, 3.0, 2.4, 2.2,
#          2.4, 2.4, 4.4, 4.4, 4.0, 3.0, 3.0, 4.4, 4.0, 3.4, 3.8, 3.4, 2.0, 3.6, 5.0, 4.0, 4.0, 6.0, 4.8, 4.0,
#          2.0, 1.6, 2.0, 3.6, 4.4, 5.0, 6.0, 6.0, 5.0, 3.6, 3.4, 4.0, 3.0, 2.6, 3.0, 3.0, 3.0, 3.6, 3.6, 5.0,
#          4.8, 2.0, 1.6, 3.8, 2.8, 2.0, 1.8, 2.8, 3.0, 3.0, 4.6, 4.4, 4.4, 4.6]
